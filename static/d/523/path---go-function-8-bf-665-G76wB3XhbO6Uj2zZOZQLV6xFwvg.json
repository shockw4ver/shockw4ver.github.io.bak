{"data":{"site":{"siteMetadata":{"title":"The Minimum Town","author":"Zhang Yongchao"}},"markdownRemark":{"id":"8029548c-b4d2-552c-82bc-1ece285cf0a3","excerpt":"本文是对匿名函数、高阶函数、闭包、同步、延时（defer）及其他 Go 函数类型或特性的概览。 这篇文章是针对 Go…","html":"<h3>本文是对匿名函数、高阶函数、闭包、同步、延时（defer）及其他 Go 函数类型或特性的概览。</h3>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/The_zoo_of_go_funcs.png\" alt=\"The Zoo of Go Funcs\"></p>\n<blockquote>\n<p><em>这篇文章是针对 Go 语言中不同的函数类型或特性的摘要总结。</em></p>\n<p><em>更为深入的探讨我会在近期的文章中进行，因为那需要更多的篇幅。这只是一个开端。</em></p>\n</blockquote>\n<h2>命名函数</h2>\n<p>一个命名函数拥有一个函数名，并且要声明在包级作用域中——<em>其他函数的外部</em></p>\n<p><em>👉</em> <strong><em>我已经在<a href=\"https://blog.learngoprogramming.com/golang-funcs-params-named-result-values-types-pass-by-value-67f4374d9c0a\">另一篇文章</a>中对它们进行了完整的介绍</em></strong></p>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/named_funcs.png\" alt=\"named Func\"></p>\n<p align=\"center\">这是一个命名函数：Len 函数接受一个 string 类型的参数并返回一个 int 类型的值</p>\n<h2>可变参数函数</h2>\n<p>变参函数可接受任意数量的参数</p>\n<p><em>👉</em> <strong><em>我已经在<a href=\"https://blog.learngoprogramming.com/golang-variadic-funcs-how-to-patterns-369408f19085\">另一篇文章</a>中对它们进行了完整的介绍</em></strong></p>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/variadic_funcs.png\" alt=\"Variadic Funcs\"></p>\n<h2>方法</h2>\n<p>当你将一个函数附加到某个类型时，这个函数就成为了该类型上的一个方法。因此，它可以通过这个类型来调用。在通过类型来调用其上的某个方法时，Go 语言会将该类型（接收者）传递给方法。</p>\n<h3>示例</h3>\n<p>新建一个计数器类型并为其定义一个方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Count <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Count<span class=\"token punctuation\">)</span> <span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  c <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上的方法与以下写法有同样的效果（但并不等价）：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span>c Count<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/methods.png\" alt=\"Method\"></p>\n<p align=\"center\">原理并不完全如上所示，但你可以像这样来理解</p>\n<h3>值传递</h3>\n<p>当 Incr 被调用时，Count 实例的值会被复制一份并传递给 Incr。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> c Count<span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// output: 1 1</span></code></pre></div>\n<h3 align=\"center\"><i></i>c 的值并不会增加，因为 c 是通过值传递的方式传递给方法</i></h3>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/value_receiver.png\" alt=\"Value receiver\"></p>\n<h3>指针传递（引用传递）</h3>\n<p>想要改变计数器 c 的值，你需要给 Incr 方法传入 Count 类型指针——<code class=\"language-text\">*Count</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Count<span class=\"token punctuation\">)</span> <span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c Count\nc<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Incur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// output: 1 2</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/pointer_receiver.png\" alt=\"pointer receiver\"></p>\n<p><a href=\"https://play.golang.org/p/hGVJWPIFZG\" title=\"receiver\"><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/run_the_code.png\" alt=\"run the code\"></a></p>\n<p align=\"center\">在我之前的一些文章中有更多的示例：看<a href=\"https://blog.learngoprogramming.com/golang-const-type-enums-iota-bc4befd096d3#c320\">这里！</a>看<a href=\"https://blog.learngoprogramming.com/golang-funcs-params-named-result-values-types-pass-by-value-67f4374d9c0a#638f\">这里！</a></p>\n<h2>接口方法</h2>\n<p>我们用<strong>接口方法</strong>的方式来重建上面的程序。先创建一个叫做 Counter 的新接口：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Counter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面的 onApiHit 函数能使用任何拥有 <code class=\"language-text\">Incr() int</code> 方法的类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">onApiHit</span><span class=\"token punctuation\">(</span>c Counter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token function\">Incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们即刻使用一下这个改造版的计数器——现在你可以使用一个名副其实的计数器接口了：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">dummyCounter <span class=\"token operator\">:=</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">onApiHit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dummyCounter<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// dummyCounter = 1</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/interface_funcs.png\" alt=\"interface methods\"></p>\n<p>我们在 Count 类型上定义了一个 <code class=\"language-text\">Incr() int</code> 方法，因此 <code class=\"language-text\">onApiHit()</code> 方法可以通过它来增长 counter —— 我将 dummyCounter 的指针传入了 onApiHit，否则这个计数器不会因而增长。</p>\n<p><a href=\"https://play.golang.org/p/w0oyZjmdMA\" title=\"interface method\"><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/run_the_code.png\" alt=\"run the code\"></a></p>\n<p><em>接口方法与普通方法的区别在于接口方法更具伸缩性、可扩展性，并且它是松耦合的。你可以利用接口方法在不同的包之间进行各自所需的实现，而不用修改 onApiHit 或是是其他方法的代码</em></p>\n<h2>函数是一等公民</h2>\n<p>一等公民意味着 Go 语言中函数也是一种值类型，可以像其他类型的值一样被存储或是传递。</p>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/first-class_funcs.png\" alt=\"first-class funcs\"></p>\n<p align=\"center\">函数可以作为一种值类型和其他的类型配合使用，反之亦然</p>\n<h3>示例</h3>\n<p>以下程序通过 Crunchers 切片将一个数值序列作为参数传递到一个叫 ”crunch“ 的函数中去。</p>\n<p>声明一个”用户自定义函数类型“，它需要接收一个 int 类型的值来返回一个 int 类型的值。</p>\n<p>这意味着任何使用这种类型的代码都可以接受一个以如下形式签名的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Cruncher <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span></code></pre></div>\n<p>声明一些 cruncher 类型的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Crunch 是一个<a href=\"https://blog.learngoprogramming.com/golang-variadic-funcs-how-to-patterns-369408f19085\">可变参数函数</a>，通过 Cruncher 类型的可变参数处理一系列的整型数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">crunch</span><span class=\"token punctuation\">(</span>nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">...</span>Cruncher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>rnums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 创建一个等价的切片</span>\n  rnums <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">,</span> nums<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> a <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> rnums <span class=\"token punctuation\">{</span>\n      rnums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>声明一个具有一些初始值的整型切片，之后对它们进行处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">nums <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">crunch</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mul<span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>输出：</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[101 103 105 107 109]</code></pre></div>\n<p><a href=\"https://play.golang.org/p/hNSKZAo0p6\" title=\"first-class func\"><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/run_the_code.png\" alt=\"run the code\"></a></p>\n<h2>匿名函数</h2>\n<p>匿名函数即没有名字的函数，它以<a href=\"https://golang.org/ref/spec#Function_literals\">函数字面量</a>的方式在行内进行声明。它在实现闭包、高阶函数、延时函数等特殊函数时有极大作用。</p>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/Anonymous_funcs.png\" alt=\"annoymous funcs\"></p>\n<h3>函数签名</h3>\n<p>命名函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Bang</span><span class=\"token punctuation\">(</span>energy <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span>Duration</code></pre></div>\n<p>匿名函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>energy <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span>Duration</code></pre></div>\n<p>它们有相同的函数签名形式，所以它们可以互换着使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span>Duration</code></pre></div>\n<p><a href=\"https://play.golang.org/p/-az-2qBr9T\" title=\"annoymous func\"><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/run_the_code.png\" alt=\"run the code\"></a></p>\n<h3>示例</h3>\n<p>我们用匿名函数的方式重构一下上面的”函数是第一公民“单元中的 cruncher 程序。在 main 函数中声明几个匿名 cruncher 函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">crunch</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>\n         <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">100</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>crunch 函数只期望接收到 Cruncher 类型的函数，并不关心它（它们）是命名函数还是匿名函数，因此以上代码可以正常工作。</p>\n<p>为了提高可读性，在传入 crunch 之前你可以先将这些匿名函数赋值给变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">mul <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\nadd <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span>\n\nsub <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">crunch</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mul<span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://play.golang.org/p/iqcumj5cka\" title=\"use annoymous func\"><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/run_the_code.png\" alt=\"run the code\"></a></p>\n<h2>高阶函数</h2>\n<p>高阶函数可以接收或返回一个甚至多个函数。本质上来来讲，它用其他函数来完成工作。</p>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/higher-order_funcs.png\" alt=\"hight-order funcs\"></p>\n<p>下面闭包单元中的 split 函数就是一个高阶函数。它的返回结果是一个 tokenizer 类型的函数。</p>\n<h2>闭包</h2>\n<p>闭包可以记住其上下文环境中所有定义过的变量。闭包的一个好处就是随时可以在其捕获的环境下操作其中的变量——<em>小心内存泄漏！</em></p>\n<h3>示例</h3>\n<p>声明一个新的函数类型，它返回一个已分割的字符串的下一个单词：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> tokenizer <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>token <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>下面的 split 函数是一个<strong>高阶函数</strong>，它根据指定的分割符来分割一个字符串，然后返回一个可以遍历这个被分割的字符串中所有单词的<strong>闭包</strong>。<em>这个闭包可以使用 ”token“ 和 ”last“ 两个在其捕获的环境下定义的变量。</em></p>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/closure.png\" alt=\"cloure\"></p>\n<h3>小试牛刀：</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token string\">\"The quick brown fox jumps over the lazy dog\"</span>\n\niter <span class=\"token operator\">:=</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  token<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span> <span class=\"token keyword\">break</span> <span class=\"token punctuation\">}</span>\n\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>在这里，我们使用了 split 函数将一句话分割成了若干个单词，然后得到了一个<em>迭代器函数</em>，并将它赋值给 iter 变量</li>\n<li>然后，我开始了一个当 iter 函数返回 false 的时候才停止的无限循环</li>\n<li>每次调用 iter 都能返回下一个单词</li>\n</ul>\n<h3>结果：</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The\nquick\nbrown\nfox\njumps\nover\nthe\nlazy\ndog</code></pre></div>\n<p><a href=\"https://play.golang.org/p/AI1_5BkO1d\" title=\"closure\"><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/run_the_code.png\" alt=\"run the code\"></a></p>\n<p align=\"center\">再次提示，这里面有更详细的描述哦~</p>\n<h2>延时函数 （defer funcs）</h2>\n<p>延时函数只在其父函数返回时被调用。多个延时函数会以栈的形式一个接一个被调用。</p>\n<p><em>👉</em> <strong><em>我在<a href=\"https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff\">另一篇文章</a>中对延时函数有详细介绍</em></strong></p>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/defer_funcs.png\" alt=\"defer func\"></p>\n<h2>并发函数</h2>\n<p><code class=\"language-text\">go func()</code> 会与其他 goroutines 并发执行。</p>\n<p><em>goroutine 是一种轻量级的线程机制，它能使你方便快捷的安排并发体系。其中，main 函数在 main-goroutine 中执行。</em></p>\n<h3>示例</h3>\n<p>这里，“start” 匿名函数通过 “go” 关键字进行调用，不会阻塞父函数的执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">start <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"concurrent func: ends\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">go</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main: continues...\"</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main: ends\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>输出</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main: continues...\nconcurrent func: ends\nmain: ends</code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/concurrent_funcs.png\" alt=\"concurrent funs\"></p>\n<p align=\"center\"><i>如果 main 函数中没有睡眠等阻塞调用，那么，main 函数会终止，而不会等待并发函数执行完。</i></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main: continues...\nmain: ends</code></pre></div>\n<p><a href=\"https://play.golang.org/p/UzbtrKxBna\" title=\"concurrent\"><img src=\"https://raw.githubusercontent.com/studygolang/gctt-images/master/go-functions-overview/run_the_code.png\" alt=\"run the code\"></a></p>\n<h2>其他类型</h2>\n<h3>递归函数</h3>\n<p>你能在任意一门语言中使用递归函数，Go 语言中的递归函数实现与它们也没有本质上的区别。然而，你可别忘了每一次的函数调用通常都会创建一个<a href=\"https://en.wikipedia.org/wiki/Call_stack#Functions_of_the_call_stack\">调用栈</a>。但在 Go 中，栈是动态的，它们能根据相应函数的需要进行增减。如果你可以不使用递归解决手上的问题，那最好。</p>\n<h3>黑洞函数</h3>\n<p>黑洞函数能被多次定义，并且不能用通常的方式进行调用。它们在测试解析器的时候有时会非常有用：看<a href=\"https://github.com/golang/tools/blob/master/imports/imports.go#L167\">这里</a></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>内联函数</h3>\n<p>Go 语言的链接器会将函数放置到可执行环境中，以便稍后在运行时调用它。与直接执行代码相比，有时调用函数是一项昂贵的操作。所以，编译器将函数的主体注入调用者函数中。</p>\n<p>更多的相关资料请参阅：<a href=\"https://github.com/golang/proposal/blob/master/design/19348-midstack-inlining.md\">这里</a>、<a href=\"http://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html\">这里</a>、<a href=\"https://medium.com/@felipedutratine/does-golang-inline-functions-b41ee2d743fa\">这里</a>和<a href=\"https://github.com/golang/go/issues/17373\">这里</a>。</p>\n<h3>外部函数</h3>\n<p>如果你省略掉函数体，仅仅进行函数声明，连接器会尝试在任何可能的地方找到这个外部函数。例如：Atan Func 在<a href=\"https://github.com/golang/go/blob/dd8dc6f0595ffc2c4951c0ce8ff6b63228effd97/src/pkg/math/atan.go#L54\"><em>这里只进行了声明</em></a>，而后在<a href=\"https://github.com/golang/go/blob/dd8dc6f0595ffc2c4951c0ce8ff6b63228effd97/src/pkg/math/atan_386.s\"><em>这里进行了实现</em></a>。</p>\n<p>via: <a href=\"https://blog.learngoprogramming.com/go-functions-overview-anonymous-closures-higher-order-deferred-concurrent-6799008dde7b\">https://blog.learngoprogramming.com/go-functions-overview-anonymous-closures-higher-order-deferred-concurrent-6799008dde7b</a></p>\n<p>作者：<a href=\"https://blog.learngoprogramming.com/@inanc\">Inanc Gumus</a>\n译者：<a href=\"https://github.com/shockw4ver\">shockw4ver</a>\n校对：<a href=\"https://github.com/rxcai\">rxcai</a>、<a href=\"https://github.com/polaris1119\">polaris1119</a></p>\n<p>本文由 <a href=\"https://github.com/studygolang/GCTT\">GCTT</a> 原创编译，<a href=\"https://studygolang.com/\">Go 中文网</a> 荣誉推出</p>","frontmatter":{"title":"Go 语言函数众生相","date":"September 29, 2018","tags":["翻译","Golang"],"type":"tech"}}},"pageContext":{"slug":"/Go-Function/","previous":{"fields":{"slug":"/Angular-Redux/"},"frontmatter":{"title":"译：在 Angular 中使用 Redux 来管理用户界面"}},"next":null}}