{"data":{"site":{"siteMetadata":{"title":"The Minimum Town","author":"Zhang Yongchao"}},"markdownRemark":{"id":"7a857cb1-cc97-5cb6-a805-800b40f14ba2","excerpt":"在此感谢 Hristo Georgiev 先生的原文许可 PS：原文链接已失效，顾不再贴出 ​ 尽管各种用于构建 web 界面的先进技术在过去几年相继出现，但 DOM 和应用 UI 的管理仍然在很大程度上依赖 jQuery——一个已经有历尽 1…","html":"<p><strong>在此感谢 Hristo Georgiev 先生的原文许可</strong><br>\n<strong>PS：原文链接已失效，顾不再贴出</strong></p>\n<p>​ 尽管各种用于构建 web 界面的先进技术在过去几年相继出现，但 DOM 和应用 UI 的管理仍然在很大程度上依赖 jQuery——一个已经有历尽 10 年沧桑的代码库。目前的对它的应用已经和它初生之时所肩负的使命有所不同，尽管这不一定是一件不好的事情。但是从结果上来看，如今的开发者们对 jQuery 的应用方式已经产生了一些问题。随着大量低耦合甚至无耦合的组件、封装后的视图组件及其他各类元素集成在一起，前端应用变得越来越复杂。</p>\n<p>​ 在这篇文章里，我们将探索一个基于 Redux 的解决方案，用于目前在 anguar2 构建的应用中极具挑战性的 UI 状态管理。接下来，我们会通过理论和一个实例来学习如何通过使用 reducer 的方法来处理应用 UI 状态的逻辑。</p>\n<h2>掌控你的应用界面布局（ UI Layout ）</h2>\n<p>​ 自从 Redux 推出以来，前端应用的状态管理得到了革命性的进步。我和我的团队实例测试结果显示，Redux 的集成对 Angular 2 应用的生产效率有极大的提升。</p>\n<blockquote>\n<p>Redux 不仅仅是加快了数据的流速，它还通过将关键性的逻辑封装在独立的区域来从整体上提升了代码的可维护性，并且为应用的结构测试提供了方便。</p>\n</blockquote>\n<p>​ 对 Redux 的沉迷让我们希望用她来管理所有事务。在我们最近的工作中，其中一个项目对 UI 有着相当强的依赖，因而我们决定试验基于这个需求来给予 Reducer 多一点的职责而不仅仅是管理数据。</p>\n<h3><em>使用 Redux 管理 UI 的三个要点</em></h3>\n<ul>\n<li>\n<p>在切换路由的时候保持 UI 的状态，譬如保持 sidebar 的展开或者收起</p>\n</li>\n<li>\n<p>在应用的任何节点控制 UI 的状态，而不用考虑如何进行组件之间的通信或者通过具体的 service 注入来控制 UI</p>\n<p>（意即不用通过组件间的通讯来控制组件的装入和卸载，而是在应用生命周期的任何时刻进行灵活的控制）</p>\n</li>\n<li>\n<p>将非 UI 行为的事件与 UI 的状态改变关联起来，如路由的改变或者处理来自服务端的数据时</p>\n</li>\n</ul>\n<h2>初始化工程</h2>\n<blockquote>\n<p>以下的示例是基于目前最流行的 bootstrap 4 风格定制的 Angular 2 组件库 “ng-bootstrap” 构建的。你也可以在这个示例中实践其他 UI 组件库，如声名远扬（译者自加的）的 Material Design。敲代码时通过遵循相同的设计原则和做一些局部的适配来让当前的组件库能够顺利运行。</p>\n</blockquote>\n<h3>依赖库</h3>\n<p>（译者注：以下示例中用到的框架已由最新的 Angular 版本对应实现，有些 api 已经进行了调整——如 StoreModule.provideStore() 在 Angular4\n的 @ngrx/store 版本中已经更新为更为标准化的<code class=\"language-text\">StoreModule.forRoot()</code>，因而请关注相关文档避免兼容问题）\n开始运行前你需要按顺序安装以下的依赖</p>\n<p><strong>Redux</strong></p>\n<ul>\n<li>@ngrx/store + @ngrx/core</li>\n<li>@ngrx/effects</li>\n<li>reselect</li>\n<li>ngrx-store-logger</li>\n</ul>\n<p><strong>Bootstrap</strong></p>\n<ul>\n<li>Bootstrap 4</li>\n<li>ng-bootstrap</li>\n</ul>\n<h3>安装</h3>\n<p>为了有一个流畅的安装过程，我们使用 Angular CLI 来初始化项目架构。执行前请确认你已经全局安装过它。</p>\n<p>在你的终端中键入一下命令来初始化一个 Angular 2 项目</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ ng new redux-layout-tutorial-app\n$ <span class=\"token function\">cd</span> redux-layout-tutorial-app</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ yarn add bootstrap@4.0.0-alpha.6\n//or by <span class=\"token function\">npm</span>\n$ <span class=\"token function\">npm</span> i --save bootstrap@4.0.0-alpha.6</code></pre></div>\n<p>你需要在项目的根目录下打开 angular-cli.json 来添加 Bootstrap 的资源库</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">apps<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    //..\n    <span class=\"token property\">\"styles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"../node_modules/bootstrap/dist/css/bootstrap.css\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    //...\n    <span class=\"token property\">\"environments\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      //...\n      <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"../node_modules/jquery/dist/jquery.js\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"../node_modules/tether/dist/js/tether.js\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"../node_modules/bootstrap/dist/js/bootstrap.js\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这会让你 angular-cli 从你的 Bootstrap 安装目录下确定 javascript 和 css 文件的位置，并在项目生成时加入他们（即形成依赖）</p>\n<p><strong>下一步</strong>，安装 ng-bootstrap</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ yarn add @ng-bootstrap/ng-bootstrap\n// or by <span class=\"token function\">npm</span>\n$ <span class=\"token function\">npm</span> i --save @ng-bootstrap/ng-bootstrap</code></pre></div>\n<p>然后在你的应用的根目录下的模块文件中引入（即 app.module.ts 文件）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>NgbModule<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ng-bootstrap/ng-bootstrap\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//..</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> NgbModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>初始化应用的 store 和基本的 reducer</h3>\n<p><strong>接下来</strong>，我们将构建一个基础的 Redux 架构，之后的操作中的用例都会基于这个架构</p>\n<p>从安装 Redux 应用 store 的核心依赖库开始把！</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ yarn add @ngrx/core\n$ yarn add @ngrx/store\n// or by <span class=\"token function\">npm</span>\n$ <span class=\"token function\">npm</span> i --save @ngrx/core\n$ <span class=\"token function\">npm</span> i --save @ngrx/store</code></pre></div>\n<p>对于异步事件，譬如 pagination 或 loading bars 的控制，我们需要引入中间件来处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ yarn add @ngrx/effects\n// or by <span class=\"token function\">npm</span>\n$ <span class=\"token function\">npm</span> i --save @ngrx/effects</code></pre></div>\n<p>我们使用<code class=\"language-text\">reselect</code>来实现高效的<code class=\"language-text\">state</code>存取操作。我们将使用<code class=\"language-text\">reselect</code>的<code class=\"language-text\">createSelector</code>方法来创建高效的选择器，这个选择器能被存储且仅在参数更改的时候才会重构：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ yarn add reselect\n// or by <span class=\"token function\">npm</span>\n$ <span class=\"token function\">npm</span> i --save reselect</code></pre></div>\n<p>为了让开发更加方便并易于调试，我们添加能够在控制台记录<code class=\"language-text\">action</code>和<code class=\"language-text\">state</code>的更新的<code class=\"language-text\">store-logger</code>来帮助我们：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ yarn add ngrx-store-logger\n// or by <span class=\"token function\">npm</span>\n$ <span class=\"token function\">npm</span> i --save ngrx-store-logger</code></pre></div>\n<p>我们将与 redux 相关联的文件都存放在 src/app/common 下来使应用架构更加合理一些：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> src/app/common</code></pre></div>\n<h3>创建界面状态</h3>\n<p><strong>接着上面的步骤</strong>，创建 common/layout 目录用于放置所有与界面状态相关的<code class=\"language-text\">action</code>，<code class=\"language-text\">effect</code>和 <code class=\"language-text\">reducer</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> src/app/common/layout\n$ <span class=\"token function\">cd</span> src/app/common/layout</code></pre></div>\n<p>我们在这个目录下创建三个与界面状态相关的文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> layout.actions.ts</code></pre></div>\n<p><strong>layout.actions.ts</strong></p>\n<p>这些<code class=\"language-text\">action</code>会在用户行为发生（打开或关闭<code class=\"language-text\">sidebar</code>，打开或关闭<code class=\"language-text\">modal</code>元素或其他操作）或者一个相关的事件（页面缩放）发生时被调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Action <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ngrx/store'</span>\n\n<span class=\"token comment\">/*\n Layout actions are defined here\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> LayoutActionTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n The action classes will be added here once they are defined\n */</span>\n\n<span class=\"token keyword\">export</span> type LayoutActions <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></code></pre></div>\n<p><strong>layout.reducer.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> layout.reducer.ts</code></pre></div>\n<p>负责界面状态的 reducer 会在每次界面状态的改变的时候更新 state</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layout.actions'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n   界面状态的描述符接口定义\n   */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initialState<span class=\"token punctuation\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n   界面状态在这里进行值的初始化\n   */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n reducer 的主控函数，在状态改变的时候返回新的 state\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>\n  state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">.</span>LayoutActions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>创建 reducer</h3>\n<p>界面状态初始化配置完成后，<strong>最后一步</strong>就是添加 reducer，它会随着<code class=\"language-text\">@ngrx/store</code>提供的<code class=\"language-text\">StoreModule</code>变化在操作流的末端进行更新</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> src/app/common/index.ts</code></pre></div>\n<p><strong>index.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* \n  引入之前提到的用于创建高效选择器的工具 createSelector\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reselect'</span>\n\n<span class=\"token comment\">/* \n 同理引入 store-logger\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> storeLogger <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ngrx-store-logger'</span>\n\n<span class=\"token comment\">/*\n 引入界面状态\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fromLayout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layout/layout.reducer'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> compose <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ngrx/core'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ngrx/store'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppState</span> <span class=\"token punctuation\">{</span>\n  layout<span class=\"token punctuation\">:</span> fromLayout<span class=\"token punctuation\">.</span>State\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> reducers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  layout<span class=\"token punctuation\">:</span> fromLayout<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> developmentReducer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Function</span> <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">storeLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  combineReducers\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">metaReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">developementReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n 创建界面状态的选择器\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLayoutState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> AppState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>layout</code></pre></div>\n<p><strong>最后，</strong>将<code class=\"language-text\">metaReducer</code>注入到根模块的<code class=\"language-text\">imports</code>数组中的<code class=\"language-text\">StoreModule</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StoreModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ngrx/store'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> metaReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/index'</span>\n<span class=\"token comment\">//...</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>StoreModule<span class=\"token punctuation\">.</span><span class=\"token function\">provideStore</span><span class=\"token punctuation\">(</span>metaReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h4>“机智的”容器与“哑巴”组件</h4>\n<p>如果你熟悉 Redux 的使用，你一定知道有两种类型的组件——<strong>视觉组件（即 UI 组件）</strong>和<strong>容器组件</strong></p>\n<blockquote>\n<p>在实现整个界面状态的时候，最好的实践是将逻辑绑定在<strong>指令（directive）</strong>中，以保证逻辑的<strong>DRY 原则</strong>。举个例子，<em>你并不需要给每一个容器组件中的 sidebar 都重复一次相同的控制逻辑</em> 。</p>\n</blockquote>\n<p>另一种方式是将逻辑写在组件内部，当然，只有特殊情况下才会将逻辑写在表现界面元素的组件（即 UI 组件）中。</p>\n<p>在这个示例中，容器组件为 <code class=\"language-text\">AppComponent</code>。我们将<code class=\"language-text\">layout.actions</code>引入到根组件<code class=\"language-text\">AppComponent</code>的<code class=\"language-text\">imports</code>中，以将状态关联到应用内部，使其可以触发<code class=\"language-text\">action</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ngrx/store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n 将初始状态引入到组件中，以操作其中的各部分状态\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fromRoot <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n 引入界面状态相关的 action 等待调用\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/layout/layout.actions'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-root'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'./app.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./app.component.css'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n  \t<span class=\"token keyword\">private</span> store<span class=\"token punctuation\">:</span> Store<span class=\"token operator\">&lt;</span>fromRoot<span class=\"token punctuation\">.</span>AppState<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Modals（模态）</h2>\n<p>实现一个模态框的最简单方式是用一个常量来标记它。毕竟一个情景下界面只应有一个模态框（除非你试着实践一些黑魔法），每个模态框应当引用自一个唯一的<code class=\"language-text\">modalName</code>。</p>\n<p>那我们就从定义<code class=\"language-text\">action</code>开始吧！</p>\n<p>用户应该具有触发和关闭模态框的能力，所有我们想这样来定义模态框的<code class=\"language-text\">action</code>：</p>\n<h4>Adding to the state</h4>\n<p><strong>layout.actions.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> LayoutActionTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">OPEN_MODAL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] Open modal'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CLOSE_MODAL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] Close modal'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n 模态框的 action\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OpenModalAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN_MODAL</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n  \t<span class=\"token keyword\">public</span> payload<span class=\"token punctuation\">:</span>string\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloseModalAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSE_MODAL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> type LayoutActions <span class=\"token operator\">=</span> CloseModalAction <span class=\"token operator\">|</span> OpenModalAction</code></pre></div>\n<p>我们继续往下写来实现<code class=\"language-text\">action</code>的处理器<code class=\"language-text\">reducer</code>：<strong>layout.reducer.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layout.actions'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  openedModalName<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initialState<span class=\"token punctuation\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  openedModalName<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>\n  state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">.</span>LayoutActions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*\n     模态框的 case\n     */</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN_MODAL</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        openedModalName<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处用 Object.assign 的原因请探寻 redux 的状态更新原理</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSE_MODAL</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        openedModalName<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getOpenedModalName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>openedModalName</code></pre></div>\n<p>当前模态框的标识符（也就是它的名字）会被<code class=\"language-text\">openedModalName</code>存储下来，然后根据调用的<code class=\"language-text\">action</code>来变化。我们需要一个选择器（<code class=\"language-text\">getOpenedModalName</code>）来操作<code class=\"language-text\">state</code>中的<code class=\"language-text\">openedModalName</code>属性。</p>\n<p><strong>index.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLayoutState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> AppState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>layout\n\n<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getLayoutOpenedModalName <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  getLayoutState<span class=\"token punctuation\">,</span>\n  fromLayout<span class=\"token punctuation\">.</span>getOpenedModalName\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>使用</h3>\n<p>我们创建一个简单的模态框来看一下它到底是如何运作的：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ ng g component template-modal</code></pre></div>\n<p><strong>template-modal.component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Component<span class=\"token punctuation\">,</span>\n  ChangeDelectionStrategy<span class=\"token punctuation\">,</span>\n  Output<span class=\"token punctuation\">,</span>\n  ViewChild<span class=\"token punctuation\">,</span>\n  EventEmiter<span class=\"token punctuation\">,</span>\n  Input<span class=\"token punctuation\">,</span>\n  ElementRef\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  NgbModal<span class=\"token punctuation\">,</span>\n  NgbModalRef\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ng-bootstrap/ng-bootstrap'</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'template-modal'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'template-modal.component.html'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TemplateModalComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> modalName<span class=\"token punctuation\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'templateFormModal'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> modalRef<span class=\"token punctuation\">:</span> NgbMOdalRef<span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">ViewChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span> _templateModal<span class=\"token punctuation\">:</span> ElementRef<span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">set</span> <span class=\"token function\">modalState</span><span class=\"token punctuation\">(</span>_modalState<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_modalState <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modalName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">openModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modalRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> onCloseModal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> modalService<span class=\"token punctuation\">:</span> NgbModal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">openModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modalRef <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modalService<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_templateModal<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      backdrop<span class=\"token punctuation\">:</span> <span class=\"token string\">'static'</span><span class=\"token punctuation\">,</span>\n      keyboard<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      size<span class=\"token punctuation\">:</span> <span class=\"token string\">'sm'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">closeModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modalRef<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每当用户尝试去关闭模态框的时候，<code class=\"language-text\">onCloseModal</code>会被 template 出发并传递到容器组件（一个 EventEmitter 的原理）。</p>\n<p>在容器组件中需要一个处理器来处理<code class=\"language-text\">openedModalName</code>的更替并调用<code class=\"language-text\">action</code>来控制模态框：</p>\n<p><strong>app.component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> openedModalName$<span class=\"token punctuation\">:</span> Obeservable<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> store<span class=\"token punctuation\">:</span> Store<span class=\"token operator\">&lt;</span>fromRoot<span class=\"token punctuation\">.</span>AppState<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 用选择器直接操作开启的模态框</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>openedModalName$ <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getLayoutOpenedModalName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 调用 action 以开启模态框</span>\n  <span class=\"token function\">handleOpenModal</span><span class=\"token punctuation\">(</span>modalName<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>OpenedModalAction</span><span class=\"token punctuation\">(</span>modalName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 调用 action 以关闭模态框() {</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>CloseModalAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>可以看到，我们能重用<code class=\"language-text\">handleOpenModal</code>和<code class=\"language-text\">handleCloseModal</code>来控制无论多少的模态框，只要这些模态框有唯一的标识符。</p>\n</blockquote>\n<blockquote>\n<p>译者：当然，这是以一种非常’DRY’的方式来控制模态框，我们也可以根据实际情况来改变这个架构</p>\n</blockquote>\n<p><strong>app.component.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- 我们通过异步流的方式来响应式的获取组件中最新的相关值 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template-modal</span> <span class=\"token attr-name\">[modalState]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>this.openedModalName$ | async<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(onCloseModal)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>handleCloseModal()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template-modal</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-outline-primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>handleOpenModal(<span class=\"token punctuation\">'</span>templateFormModal<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Open modal with template\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- 别忘了把这个写上 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">ngbModalContainer</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在这个示例中，点击按钮来触发了<code class=\"language-text\">hanelOpenModal</code>，但这并不是唯一的触发方式，有了 Redux，我们可以在任何地方调用 action 来执行它，指令、<code class=\"language-text\">service</code>或者<code class=\"language-text\">effect</code>。这是没有限制的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3530973-0142dc4f6bf4fdbb.gif?imageMogr2/auto-orient/strip\" alt=\"example1_modal\"></p>\n<h2>Sidebar(s) 侧边栏</h2>\n<p>-\n在一个应用中，其侧边栏最基本的视觉属性便是它的显示和隐藏。在全局的状态中由一个布尔值属性来决定侧边栏是<code class=\"language-text\">opened</code>状态还是<code class=\"language-text\">closed</code>状态。如果有两个侧边栏（或者多个，看你是怎么玩的>_&#x3C;!!），那就为每一个侧边栏提供一个状态属性。</p>\n<p>当用户与侧边栏交互的时候，需要有一些类似于开关作用的<code class=\"language-text\">action</code>：\n<strong>layout.action.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> LayoutActionTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//左侧边栏行为</span>\n  <span class=\"token constant\">OPEN_LEFT_SIDENAV</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] Open LeftSidenav'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CLOSE_LEFT_SIDENAV</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] Close LeftSidenav'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//右侧边栏行为</span>\n  <span class=\"token constant\">OPEN_RIGHT_SIDENAV</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] Open RightSidenav'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CLOSE_RIGHT_SIDENAV</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] Close RightSidenav'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OpenLeftSidenavAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN_LEFT_SIDENAV</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloseLeftSidenavAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSE_LEFT_SIDENAV</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OpenRightSidenavAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN_RIGHT_SIDENAV</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloseRightSidenavAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSE_RIGHT_SIDENAV</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> type LayoutActions <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> CloseLeftSidenavAction\n  <span class=\"token operator\">|</span> OpenLeftSidenavAction\n  <span class=\"token operator\">|</span> CloseRightSidenavAction\n  <span class=\"token operator\">|</span> OpenRightSidenavAction</code></pre></div>\n<p>根据之前提到的，侧边栏的状态属性值应该是布尔类型的变量。在这个示例中，左侧边栏默认开启，但是会有一个根据屏幕尺寸来决定是否调用<code class=\"language-text\">CloseLeftSidenavAction</code>来关闭它的逻辑。\n<strong>layout.reducer.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layout.actionis'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  leftSidebarOpened<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n  rightSidebarOpened<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initialState<span class=\"token punctuation\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  leftSidebarOpened<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  rightSidebarOpened<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>\n  state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">.</span>LayoutActions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSE_LEFT_SIDENAV</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> leftSidebarOpened<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN_LEFT_SIDENAV</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> leftSidebarOpened<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">CLOSE_RIGHT_SIDENAV</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> rightSidebarOpened<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN_RIGHT_SIDENAV</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> rightSidebarOpened<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLeftSidenavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>leftSidebarOpened\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRightSidenavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>rightSidebarOpened</code></pre></div>\n<p>在<strong>index.ts</strong>中添加一些选择器来访问侧边栏的状态:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLeftSidenavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>leftSidebarOpened\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRightSidenavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>rightSidebarOpened</code></pre></div>\n<h3>使用</h3>\n<p>除了将逻辑绑定在组件自身外，还可以通过结合结构型指令来关闭或开启对应的侧边栏。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ ng g directive sidebar-watch</code></pre></div>\n<p><strong>sidebar-watch.directive.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Directive<span class=\"token punctuation\">,</span>\n  ElementRef<span class=\"token punctuation\">,</span>\n  Renderer<span class=\"token punctuation\">,</span>\n  OnInit<span class=\"token punctuation\">,</span>\n  AfterViewInit<span class=\"token punctuation\">,</span>\n  AfterViewChecked\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Store\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ngrx/store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fromRoot <span class=\"token keyword\">from</span> <span class=\"token string\">\"../common/index\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">Directive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'[sidebarWatch]'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SidebarWatchDirective</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> el<span class=\"token punctuation\">:</span> ElementRef<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> _store<span class=\"token punctuation\">:</span> Store <span class=\"token operator\">&lt;</span> fromRoot<span class=\"token punctuation\">.</span>AppState <span class=\"token operator\">></span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">/* Doing the checks on ngOnInit makes sure the DOM is fully loaded and the elements are available to be selected */</span>\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 监听左侧边栏状态 */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getLayoutLeftSidenavState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>nativeElement<span class=\"token punctuation\">.</span>className <span class=\"token operator\">==</span> <span class=\"token string\">'left-sidebar'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#main-content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"margin-left\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"300px\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>nativeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'300px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#main-content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"margin-left\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>nativeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 监听右侧边栏状态 */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getLayoutRightSidenavState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* You can use classes (addClass/removeClass) instead of using jQuery css(), or you can go completely vanilla by using selectors such as windiw.getElementById(). . */</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>nativeElement<span class=\"token punctuation\">.</span>className <span class=\"token operator\">==</span> <span class=\"token string\">'right-sidebar'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#fade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fade-in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#rightBar-body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"opacity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"overflow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hidden\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>nativeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'60%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#fade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fade-in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#rightBar-body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"opacity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"overflow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>nativeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>该指令控制<code class=\"language-text\">ElementRef</code>的<code class=\"language-text\">nativeElement</code>属性,这个属性用于访问组件模板中 DOM。当指令知道了（也就是绑定成功）它控制哪个侧边栏以后，便确认其对应的状态是<code class=\"language-text\">true</code>还是<code class=\"language-text\">false</code>。然后通过 jQuery 去操作视图中对应的元素。jQuery 的使用能高效的选定元素和改变其属性，并使用原生的 JavaScript 去增删元素的 class。</p>\n<p>类似的，我们可以创建一个用于控制侧边栏开关的指令</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/** * Created by Centroida-2 on 1/22/2017. */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Directive<span class=\"token punctuation\">,</span>\n  Input<span class=\"token punctuation\">,</span>\n  ElementRef<span class=\"token punctuation\">,</span>\n  Renderer<span class=\"token punctuation\">,</span>\n  HostListener\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Store\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ngrx/store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fromRoot <span class=\"token keyword\">from</span> <span class=\"token string\">\"../common/index\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/layout/layout.actions'</span>\n@<span class=\"token function\">Directive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'[sidebarToggle]'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SidebarToggleDirective</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> leftSidebarState<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> rightSidebarState<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> sidebarToggle<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">HostListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'$event'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 左侧边栏开关 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sidebarToggle <span class=\"token operator\">==</span> <span class=\"token string\">\"left\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>leftSidebarState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>CloseLeftSidenavAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sidebarToggle <span class=\"token operator\">==</span> <span class=\"token string\">\"left\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>leftSidebarState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>OpenLeftSidenavAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* 右侧边栏开关 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sidebarToggle <span class=\"token operator\">==</span> <span class=\"token string\">\"right\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rightSidebarState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>CloseRightSidenavAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sidebarToggle <span class=\"token operator\">==</span> <span class=\"token string\">\"right\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rightSidebarState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>OpenRightSidenavAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> el<span class=\"token punctuation\">:</span> ElementRef<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> renderer<span class=\"token punctuation\">:</span> Renderer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> _store<span class=\"token punctuation\">:</span> Store <span class=\"token operator\">&lt;</span> fromRoot<span class=\"token punctuation\">.</span>AppState <span class=\"token operator\">></span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getLayoutLeftSidenavState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>leftSidebarState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getLayoutRightSidenavState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rightSidebarState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>该指令有一个输入型属性<code class=\"language-text\">@Input sidebarToggle</code>，其值可以为<code class=\"language-text\">left</code>或者<code class=\"language-text\">right</code>，由它控制的侧边栏位置所决定。每当用户点击元素触发侧边栏行为的时候，<code class=\"language-text\">@HostListener(&#39;click&#39;)</code>会捕获这个点击事件并且检查该侧边栏的全局状态，并调用对应的 action。</p>\n<p>我们创建两个侧边栏来验证以上的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ ng g component left-sidebar</code></pre></div>\n<p><strong>left-sidebar-component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'left-sidebar'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'left-sidebar.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./sidebar.styles.css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeftSidebarComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>left-sidebar.component.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">sidebarWatch</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left-sidebar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>接着创建另一个侧边栏</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ ng g component right-sidebar</code></pre></div>\n<p><strong>right-sidebar.component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'right-sidebar'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'right-sidebar.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./sidebar.styles.css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RightSidebarComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>right-sidebar.component.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">sidebarWatch</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right-sidebar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sidebarToggle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Close Right Sidebar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">sidebarWatch</code>的使用方式很直观。只需要将它放置在侧边栏组件的顶层元素中。\n<code class=\"language-text\">sidebarToggle</code>需要放置在控制侧边栏开关的元素中（在这里以 button 为例），并且需要将<code class=\"language-text\">left</code>或者<code class=\"language-text\">right</code>赋值给这个指令，让它知道自己控制的是哪个侧边栏。\n我们需要一些样式来让这些元素看起来更像侧边栏：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> src/app/components/sidebar.styles.css</code></pre></div>\n<p><strong>sidebar.styles.css</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.left-sidebar,\n.right-sidebar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> width 0.3s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 1px 3px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0, 0, 0, 0.15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.left-sidebar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #909090<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.right-sidebar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> auto <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow-x</span><span class=\"token punctuation\">:</span> hidden <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 999 <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #212121<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在应用的根组件中，将侧边栏放置在 class 为<code class=\"language-text\">main-content</code>的 div 元素的上方：\n<strong>app.component.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fade<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fade-in<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>left-sidebar</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>left-sidebar</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>right-sidebar</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>right-sidebar</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sidebarToggle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Toggle Left Sidebar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sidebarToggle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Toggle Right Sidebar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- ... --></span></code></pre></div>\n<p>这个 id 为<code class=\"language-text\">fade</code>的 div 元素用于在右侧边栏开启的时候实现 fade 过渡效果。为其添加一些样式：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.fade-in</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">postition</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> 100% <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0, 0, 0, 0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> top 0.3s, right 0.3s, bottom 0.3s, left 0.3s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>在这样的设定中，侧边栏完全是无关其容器的。任何元素都可以通过指令在视图中的任何位置来实现和侧边栏一样的效果。并且可以灵活的根据需求去添加底栏或者顶栏组件</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3530973-9b9490e7f56e7cbc.gif?imageMogr2/auto-orient/strip\" alt=\"example2_sidebar\"></p>\n<h2>Dismissable Alerts （可消除的呼出提示）</h2>\n<p>-\n控制 alert 在应用中何时何地呼出。因为 alert 要么是服务端控制呼出，要么是通过用户行为呈现，因此它理所应当由应用状态进行控制。</p>\n<p>与本文的其他示例不同，“reduxifying”的 alert 相比起来要容易一些——它们能根据状态中响应的 alert 项集合的增删进行直接的渲染。</p>\n<p>通常情况下，一个 alert 应当由两个属性：<code class=\"language-text\">message</code>和<code class=\"language-text\">type</code>。一下是一个 alert 的属性模型：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Alert</span> <span class=\"token punctuation\">{</span>\n  message<span class=\"token punctuation\">:</span> string\n  type<span class=\"token punctuation\">:</span> string\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先，我们添加一些 action 来控制 alert 的增删：\nlayout.actions.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> LayoutActionTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">ADD_ALERT</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] add alert'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REMOVE_ALERT</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] remove alert'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddAlertAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ADD_ALERT</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> payload<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RemoveAlertAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">REMOVE_ALERT</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> payload<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> type LayoutActions <span class=\"token operator\">=</span> AddAlertAction <span class=\"token operator\">|</span> RemoveAlertAction</code></pre></div>\n<p>接着，我们在视图状态中创建 alert 的片段：\n<strong>layout.reducer.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layout.actions'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  alerts<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> initialState<span class=\"token punctuation\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  alerts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>\n  state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">.</span>LayoutActions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">ADD_ALERT</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        alerts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>alerts<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">REMOVE_ALERT</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* Alerts are filtered by message content, but for real-world usage, an 'id' field would be more suitable. */</span>\n        alerts<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>alerts<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n          alert <span class=\"token operator\">=></span> alert<span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* If you add more attributes to the alerts such as 'position' or 'modelType', there can be more selectors added that can filter the collection and allow only certain to be displayed in designated places in the application. */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAlerts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>alerts</code></pre></div>\n<p>最后，我们在<code class=\"language-text\">index.ts</code>中为 alert 添加一个选择器：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//..</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getLayoutAlertsState <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  getLayoutState<span class=\"token punctuation\">,</span>\n  fromLayout<span class=\"token punctuation\">.</span>getAlerts\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这就是全部了。现在 alert 是应用状态的一部分了。但如和使用呢？我们继续前进。</p>\n<h3>使用</h3>\n<p>通过一些工具的使用，构建 alert 只需要非常小段的代码，因为 ng-bootstrap 已经提供了的实现。因此，我们只需要在任何有相应需求的地方复用这个组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> src/app/alerts-list.component.ts</code></pre></div>\n<p><strong>alerts.component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Input<span class=\"token punctuation\">,</span> EventEmitter<span class=\"token punctuation\">,</span> Output <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'alerts-list'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'alerts-list.component.html'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlertsListComponent</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  alerts<span class=\"token punctuation\">:</span> any\n  @<span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  closeAlert <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个组件接收一个包含一些 alert 对象的数组，然后想要关闭的 alert 对应的事件响应。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> src/app/alerts-list.component.html</code></pre></div>\n<p><strong>alerts.component.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let alert of alerts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ngb-alert</span> <span class=\"token attr-name\">[type]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>alert.type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(close)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>closeAlert.emit(alert)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ alert.message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ngb-alert</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>不要忘记将组件导入到根模块：\n<strong>app.module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AlertsListComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/alerts-list.component'</span>\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    AlertsListComponent<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来，容器组件需要实现一个选定 alert 和调起事件的逻辑。\n<strong>app.component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Component<span class=\"token punctuation\">,</span>\n  OnInit\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Store\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ngrx/store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Observable\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fromRoot <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/layout/layout.actions'</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-root'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'./app.component.html'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> alerts$<span class=\"token punctuation\">:</span> Observable <span class=\"token operator\">&lt;</span> any <span class=\"token operator\">></span> <span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> store<span class=\"token punctuation\">:</span> Store <span class=\"token operator\">&lt;</span> fromRoot<span class=\"token punctuation\">.</span>AppState <span class=\"token operator\">></span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alerts$ <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getLayoutAlertsState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">addAlert</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>AddAlertAction</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onCloseAlert</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>RemoveAlertAction</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们用两个呼出不同类型 alert 的按钮来查看 alert 的效果：\n<strong>app.component.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fade<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fade-in<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>left-sidebar</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>left-sidebar</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>right-sidebar</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>right-sidebar</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- List of alerts goes here --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>alerts-list</span> <span class=\"token attr-name\">[alerts]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>alerts$ | async (closeAlert)=<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onCloseAlert($event)</span>\n    <span class=\"token attr-name\">\"</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>alerts-list</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- Buttons for creating alerts --></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-danger <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>addAlert({type: <span class=\"token punctuation\">'</span>danger<span class=\"token punctuation\">'</span>, message: <span class=\"token punctuation\">'</span>This is a danger alert<span class=\"token punctuation\">'</span>})\n    <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add a danger alert<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-success <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>addAlert({type: <span class=\"token punctuation\">'</span>success<span class=\"token punctuation\">'</span>, message: <span class=\"token punctuation\">'</span>This is a success alert<span class=\"token punctuation\">'</span>}) <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add a success alert<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3530973-2057d6daa0f8590b.gif?imageMogr2/auto-orient/strip\" alt=\"example3_alert\"></p>\n<p>在实际的开发方案中，alert 可以在服务端返回一个确切的结果的时候进行呼出。比如，在如下的片段中，当应用处理来自服务端的请求会调用<code class=\"language-text\">AddAlertAction</code>来呼出 alert。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">@<span class=\"token function\">Effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> deleteStudent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_actions<span class=\"token punctuation\">.</span><span class=\"token function\">ofType</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>ActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_STUDENT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_service<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mergeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteStudentSuccessAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Chain actions - once the server successfully deletes some model, create an alert from it. */</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>AddAlertAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span>\n          message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Student successfully deleted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>AddAlertAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">'danger'</span><span class=\"token punctuation\">,</span>\n            message<span class=\"token punctuation\">:</span> <span class=\"token string\">'An error ocurred.'</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteStudentFailureAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Window size （窗口尺寸）</h2>\n<p>在应用状态中存储一个监听窗口尺寸的属性能让 Redux 在许多方面相当有用，尤其是在实现响应式的视图、设备相关的行为或者样式（通过 NgClass 或者 NgStyle 等方式）的动态更换的时候。</p>\n<p>我们要在窗口尺寸发生改变的时候同时改变应用状态中对应的属性值来让它发挥作用。我们为它添加一个 action：\n<strong>layout.actions.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Action\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ngrx/store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> LayoutActionTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 添加对应窗口拉伸行为的 action</span>\n  <span class=\"token constant\">RESIZE_WINDOW</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Layout] Resize window'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResizeWndowAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">RESIZE_WINDOW</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> payload<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> type LayoutActions <span class=\"token operator\">=</span> ResizeWndowAction</code></pre></div>\n<p>我们需要<code class=\"language-text\">windowWidth</code>和<code class=\"language-text\">windowHeight</code>两个属性来实现窗口尺寸的存储：\n<strong>layout.reducer.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layout.actions'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  windowHeight<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  windowWidth<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> initialState<span class=\"token punctuation\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  windowHeight<span class=\"token punctuation\">:</span> window<span class=\"token punctuation\">.</span>screen<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span>\n  windowWidth<span class=\"token punctuation\">:</span> window<span class=\"token punctuation\">.</span>screen<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>\n  state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">.</span>LayoutActions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token comment\">/* Window resize case */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">RESIZE_WINDOW</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> height<span class=\"token punctuation\">:</span> number <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> width<span class=\"token punctuation\">:</span> number <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        windowHeight<span class=\"token punctuation\">:</span> height<span class=\"token punctuation\">,</span>\n        windowWidth<span class=\"token punctuation\">:</span> width<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getWindowWidth</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>windowWidth\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getWindowHeight</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>windowHeight</code></pre></div>\n<p>我们直接用<code class=\"language-text\">window.screen.height</code>和<code class=\"language-text\">window.screen.width</code>的值来作为初始化的状态值。<code class=\"language-text\">WindowResizeAction</code>附带一个包含窗口高宽值的对象：<code class=\"language-text\">{width: number, height: number</code>。\n有许多种方式可以监听窗口的拉伸，但或许最方便也最常用的方式是给根组件修饰器的<code class=\"language-text\">host</code>属性添加一个监听。如此一来，无论用户在应用的何处，只要发生了窗口拉伸，<code class=\"language-text\">ResizeWindowAction</code>都会被调用。\n<strong>app.component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Component<span class=\"token punctuation\">,</span>\n  OnInit\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Store\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ngrx/store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Observable\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fromRoot <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> layout <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/layout/layout.actions'</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-root'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'./app.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./app.component.css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* Add this to your AppComponent to listen for window resize events */</span>\n  host<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'(window:resize)'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'onWindowResize($event)'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> store<span class=\"token punctuation\">:</span> Store <span class=\"token operator\">&lt;</span> fromRoot<span class=\"token punctuation\">.</span>AppState <span class=\"token operator\">></span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onWindowResize</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">layout<span class=\"token punctuation\">.</span>ResizeWndowAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      width<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span>\n      height<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>innerHeight\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">host</code>将会监听窗口拉伸并调用<code class=\"language-text\">onWindowResize</code>方法，并传入事件对象。这个方法通过<code class=\"language-text\">event.target</code>获取新的窗口尺寸，然后将其作为参数来调用<code class=\"language-text\">ResizeWindowAction</code>以更新状态中的值。</p>\n<h3>使用</h3>\n<p>最普遍的窗口尺寸需求就是响应式设计。比如，当屏幕像素宽小于 768px（iPad）的时候希望左侧边栏初始状态为收起。用 Redux 实现这个需求非常简单——只需要添加一个 if 语句进行对应操作：\n<strong>layout.reducers.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>\n  state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">.</span>LayoutActions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> layout<span class=\"token punctuation\">.</span>LayoutActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">RESIZE_WINDOW</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> height<span class=\"token punctuation\">:</span> number <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> width<span class=\"token punctuation\">:</span> number <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> leftSidebarState <span class=\"token operator\">=</span> width <span class=\"token operator\">&lt;</span> <span class=\"token number\">768</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>leftSidebarOpened\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        windowHeight<span class=\"token punctuation\">:</span> height<span class=\"token punctuation\">,</span>\n        windowWidth<span class=\"token punctuation\">:</span> width<span class=\"token punctuation\">,</span>\n        leftSidebarOpened<span class=\"token punctuation\">:</span> leftSidebarState<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果是使用 jQuery，相同的实现过程是不那么尽如人意的。然而，有了 Redux，一个三目表达式就可以满足你的需要。</p>\n<blockquote>\n<p>使用 Redux 的时候，所有的逻辑会在一个状态中心隔离开来，并且调试和测试你所有的实现是非常容易。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/pluralsight/guides/master/images/af6575a9-50ff-4d9a-aaae-b43861b2e265.com-video-to-gif\" alt=\"example4_window-size\"></p>\n<h2>Server-side Pagination （服务端分页）</h2>\n<p>（译者注：其实 Server-side 在这里的含义并不是指由服务端完成分页，而是强调应用状态在客户端和服务端的联动性）\n用 Redux 管理应用分页可以提高应用状态的利用率，并用尽可能少的代码来提高灵活性。</p>\n<h2>GiantBomb API</h2>\n<p>我们用 GiantBomb API 来作为数据源来演示 Redux pagination 是如何运作的。我们将请求到 GiantBomb 数据库中的游戏数据，然后对结果进行分页。分页由应用状态管理。</p>\n<p>首先，创建<code class=\"language-text\">games</code>文件夹：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> src/app/common/games</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> src/app/common/games.actions.ts</code></pre></div>\n<p><strong>games.actions.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  type\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../util\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Action\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ngrx/store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> GameActionTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Because the games collection is asynchronous, there need to be actions to handle each of the stages of the request. */</span>\n  <span class=\"token constant\">LOAD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Games] load games'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LOAD_SUCCESS</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Games] successfully loaded games'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LOAD_FAILURE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'[Games] failed to load games'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadGamesAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> GameActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> payload<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadGamesFailedAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> GameActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD_FAILURE</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadGamesSuccessAction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> GameActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD_SUCCESS</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> payload<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> type GameActions <span class=\"token operator\">=</span> LoadGamesAction <span class=\"token operator\">|</span> LoadGamesFailedAction <span class=\"token operator\">|</span> LoadGamesSuccessAction</code></pre></div>\n<p>Redux 中有一个加载异步数据的规则，由<code class=\"language-text\">LOAD</code>，<code class=\"language-text\">LOAD_SUCCESS</code>和<code class=\"language-text\">LOAD_FAILURE</code>三个 action 实现。后两个会在 middleware （Redux 中间件）处理服务端响应的时候调起。\n我们梳理一下实现一个分页功能的所需的组成部分，以明确如何来构造这个<code class=\"language-text\">games</code>的分页状态：</p>\n<ol>\n<li>当前页码</li>\n<li>数据的总量</li>\n<li>当前展示数据的集合</li>\n<li>（可选）每个分页展示的数据量</li>\n</ol>\n<p>有了如上思路，那么分页状态的接口应当如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  loaded<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n  loading<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n  entities<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  page<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们看看整个功能代码是什么样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> src/app/common/games.reducer.ts</code></pre></div>\n<p>games.reducer.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reselect'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> games <span class=\"token keyword\">from</span> <span class=\"token string\">'./games.actions'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  loaded<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n  loading<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n  entities<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  page<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> initialState<span class=\"token punctuation\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  loaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  entities<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  page<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>\n  state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token punctuation\">:</span> games<span class=\"token punctuation\">.</span>GameActions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> games<span class=\"token punctuation\">.</span>GameActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/* If there is no page selected, use the page from the initial state */</span> page<span class=\"token punctuation\">:</span>\n          page <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> state<span class=\"token punctuation\">.</span>page <span class=\"token punctuation\">:</span> page<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> games<span class=\"token punctuation\">.</span>GameActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD_SUCCESS</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> games <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'results'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> gamesCount <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'number_of_total_results'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        loaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        entities<span class=\"token punctuation\">:</span> games<span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">:</span> gamesCount<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> games<span class=\"token punctuation\">.</span>GameActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD_FAILURE</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        loaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        entities<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">/* Selectors for the state that will be later used in the games-list component */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getEntities</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>entities\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>page\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLoadingState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>loading</code></pre></div>\n<p>每当<code class=\"language-text\">GamesAction</code>调起<code class=\"language-text\">LOAD</code>的时候，都会将页码传递到 reducer 并赋值给当前状态。剩下的工作就是用当前分页状态的<code class=\"language-text\">page</code>去请求服务器。我们需要将这个状态集成到全局中去来实现这个功能。\n<strong>index.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fromGames <span class=\"token keyword\">from</span> <span class=\"token string\">'./games/games.reducer'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppState</span> <span class=\"token punctuation\">{</span>\n  layout<span class=\"token punctuation\">:</span> fromLayout<span class=\"token punctuation\">.</span>State<span class=\"token punctuation\">;</span>\n  games<span class=\"token punctuation\">:</span> fromGames<span class=\"token punctuation\">.</span>State<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> reducers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  layout<span class=\"token punctuation\">:</span> fromLayout<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n  games<span class=\"token punctuation\">:</span> fromGames<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getGamesState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> AppState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>games\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getGamesEntities <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  getGamesState<span class=\"token punctuation\">,</span>\n  fromGames<span class=\"token punctuation\">.</span>getEntities\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getGamesCount <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>getGamesState<span class=\"token punctuation\">,</span> fromGames<span class=\"token punctuation\">.</span>getCount<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getGamesPage <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>getGamesState<span class=\"token punctuation\">,</span> fromGames<span class=\"token punctuation\">.</span>getPage<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getGamesLoadingState <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  getGamesState<span class=\"token punctuation\">,</span>\n  fromGames<span class=\"token punctuation\">.</span>getLoadingState\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">getGamesPage</code>用于取得当前页码并将其作为参数来请求服务端数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> src/app/common/games.service.ts</code></pre></div>\n<p><strong>games.service.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Injectable<span class=\"token punctuation\">,</span>\n  Inject\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Response<span class=\"token punctuation\">,</span>\n  Http<span class=\"token punctuation\">,</span>\n  Headers<span class=\"token punctuation\">,</span>\n  RequestOptions<span class=\"token punctuation\">,</span>\n  Jsonp\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@angular/http\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Store\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ngrx/store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fromRoot <span class=\"token keyword\">from</span> <span class=\"token string\">\"../index\"</span>\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GamesService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> page<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> jsonp<span class=\"token punctuation\">:</span> Jsonp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> store<span class=\"token punctuation\">:</span> Store <span class=\"token operator\">&lt;</span> fromRoot<span class=\"token punctuation\">.</span>AppState <span class=\"token operator\">></span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Get the page from the games state */</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getGamesPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>page <span class=\"token operator\">=</span> page<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* Get the list of games. GiantBomb requires a jsnop request with a token. You can use this token as a present from me, the author, and use it in moderation! */</span>\n  <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> pagination <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`http://www.giantbomb.com/api/games/?api_key=b89a6126dc90f68a87a6fe1394e64d7312b242da&amp;?&amp;offset=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pagination<span class=\"token punctuation\">.</span>offset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pagination<span class=\"token punctuation\">.</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;format=jsonp&amp;json_callback=JSONP_CALLBACK`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jsonp<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token punctuation\">:</span> <span class=\"token string\">'Get'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span><span class=\"token string\">'_body'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">/** * This function converts a page to a pagination * query. * * @param page * * @returns {{offset: number, limit: number}} */</span>\n  <span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> beginItem<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> endItem<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> itemsPerPage<span class=\"token punctuation\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      beginItem <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      beginItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> itemsPerPage<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      offset<span class=\"token punctuation\">:</span> beginItem<span class=\"token punctuation\">,</span>\n      limit<span class=\"token punctuation\">:</span> itemsPerPage\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当前的页码信息是从状态中获取的，并且由<code class=\"language-text\">paginate</code>进行传递。<code class=\"language-text\">paginate</code>是一个辅助函数，用于将当前页码信息转换成符合 GiantBomb API 规则的<code class=\"language-text\">offset</code>和<code class=\"language-text\">limit</code>参数。</p>\n<p>接下来，我们实现一个用于调用 service 和调起<code class=\"language-text\">SUCCESS</code>或<code class=\"language-text\">FAILURE</code> action 的中间件。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> src/app/common/games.effects.ts</code></pre></div>\n<p><strong>games.effects.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'rxjs/add/operator/map'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'rxjs/add/operator/catch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'rxjs/add/operator/switchMap'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Observable\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs/Observable'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Injectable\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@angular/core\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> games <span class=\"token keyword\">from</span> <span class=\"token string\">\"./games.actions\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Actions<span class=\"token punctuation\">,</span>\n  Effect\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ngrx/effects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  GamesService\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./games.service\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  LoadGamesSuccessAction\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./games.actions\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  LoadGamesFailedAction\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./games.actions\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameEffects</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> _actions<span class=\"token punctuation\">:</span> Actions<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> _service<span class=\"token punctuation\">:</span> GamesService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  @<span class=\"token function\">Effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> loadGames$ <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_actions<span class=\"token punctuation\">.</span><span class=\"token function\">ofType</span><span class=\"token punctuation\">(</span>games<span class=\"token punctuation\">.</span>GameActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_service<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>games<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadGamesSuccessAction</span><span class=\"token punctuation\">(</span>games<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Observable<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadGamesFailedAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后，从<code class=\"language-text\">@ngrx/effects</code>模块中导入<code class=\"language-text\">EffectsModule</code>并运行该 effect，再将<code class=\"language-text\">GamesService</code>以 provider 的形式导入：\n<strong>app.module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EffectsModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ngrx/effects'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GameEffects <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/games/games.effects'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GamesService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/games/games.service'</span>\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>EffectsModule<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>GameEffects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>GamesService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个实现为分页功能提供了极大的便利——该应用的状态同时用于客户端的数据呈现和服务端的数据查询。</p>\n<h3>使用</h3>\n<p>我们构建一个<code class=\"language-text\">games-list</code>组件来确认这个分页实现在开发可重用分页功能时的可用性。</p>\n<p>之前提到的，分页的实现需要状态中有 4 个“片段”：</p>\n<ol>\n<li>数据实例的集合</li>\n<li>数据总量</li>\n<li>当前页码</li>\n<li>Loading/Loaded 状态</li>\n</ol>\n<p>我们先创建一个<code class=\"language-text\">game-list</code>的模板：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ ng g component games-list</code></pre></div>\n<p><strong>games-list.component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Component,\n  OnInit,\n  Input,\n  EventEmitter,\n  Output\n} from &#39;@angular/core&#39;;\n@Component({\n  selector: &#39;games-list&#39;,\n  templateUrl: &#39;games-list.component.html&#39;,\n}) export class GamesListComponent { /* The minimim required inputs of a list component using redux */\n  @Input() games: any;\n  @Input() count: number;\n  @Input() page: number;\n  @Input() loading: boolean; /* Emit and event when the user clicks on another page */\n  @Output() onPageChanged = new EventEmitter &lt; number &gt; ();\n  constructor() {}\n}</code></pre></div>\n<p><strong>games-list.component.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>games<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table table-hover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>thead-inverse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let game of games<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>{{game?.name}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ngb-pagination</span> <span class=\"token attr-name\">[collectionSize]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>count<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[(page)]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>page<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(pageChange)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onPageChanged.emit($event)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[maxSize]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[disabled]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ngb-pagination</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在根模块中声明这个组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  GamesListComponent\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/games-list.component\"</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>GamesListComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">GamesListComponent</code>使用 ng-bootstrap 中的 ngbPagination 组件来辅助构建。这个组件需要通过输入（<code class=\"language-text\">@Input</code>）属性来渲染一个分页，而<code class=\"language-text\">pageChange</code>事件会触发输出（<code class=\"language-text\">@Output</code>）函数<code class=\"language-text\">onPageChanged</code>来将动作传递到容器组件。</p>\n<p>接下来，我们对容器组件进行完善（在这个示例中，即<code class=\"language-text\">AppComponent</code>）。</p>\n<p>容器组件需要做一些工作来使分页功能运行起来：</p>\n<ol>\n<li>提供相应的状态信息作为<code class=\"language-text\">GamesListComponent</code>组件的输入</li>\n<li>有一个方法来处理<code class=\"language-text\">onPageChanged</code>事件</li>\n</ol>\n<p><strong>app.component.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> games <span class=\"token keyword\">from</span> <span class=\"token string\">'./common/games/games.actions'</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-root'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'./app.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./app.component.css'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> games$<span class=\"token punctuation\">:</span> Observable <span class=\"token operator\">&lt;</span> any <span class=\"token operator\">></span> <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> gamesCount$<span class=\"token punctuation\">:</span> Observable <span class=\"token operator\">&lt;</span> number <span class=\"token operator\">></span> <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> gamesPage$<span class=\"token punctuation\">:</span> Observable <span class=\"token operator\">&lt;</span> number <span class=\"token operator\">></span> <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> gamesLoading$<span class=\"token punctuation\">:</span> Observable <span class=\"token operator\">&lt;</span> boolean <span class=\"token operator\">></span> <span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> store<span class=\"token punctuation\">:</span> Store <span class=\"token operator\">&lt;</span> fromRoot<span class=\"token punctuation\">.</span>AppState <span class=\"token operator\">></span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Select all the parts of the state needed for the GamesListComponent */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>games$ <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getGamesEntities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gamesCount$ <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getGamesCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gamesPage$ <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getGamesPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gamesLoading$ <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fromRoot<span class=\"token punctuation\">.</span>getGamesLoadingState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* When the component initializes, render the first page ofresults */</span>\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">games<span class=\"token punctuation\">.</span>LoadGamesAction</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onGamesPageChanged</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">games<span class=\"token punctuation\">.</span>LoadGamesAction</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后，将<code class=\"language-text\">GamesListComponent</code>的选择器添加到<code class=\"language-text\">AppComponent</code>的模板。\n<strong>app.component.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=&quot;main-content&quot;&gt; &lt;!-- ... --&gt;\n  &lt;games-list [games]=&quot;games$ | async&quot; [count]=&quot;gamesCount$ | async&quot; [page]=&quot;gamesPage$ | async&quot; [loading]=&quot;gamesLoading$ | async&quot; (onPageChanged)=&quot;onGamesPageChanged($event)&quot;&gt;&lt;/games-list&gt;\n&lt;/div&gt;</code></pre></div>\n<p><code class=\"language-text\">async</code>管道在这里会提取对应 observable 变量最近一次的值，同时监听状态的更新，然后作为输入属性传递到组件中去。</p>\n<p>以下是分页功能在触发 action 时的运行图示：\n<img src=\"https://raw.githubusercontent.com/pluralsight/guides/master/images/eb8c1c24-1757-48c0-885b-4d056da8c7ca.com-video-to-gif_1\" alt=\"example5_Pagination\"></p>\n<h2>结论</h2>\n<p>这些示例代表了许多你在使用 Angular 2/4 + Redux 构建应用时可能遇到的需求。它们在很大程度上提供了一个样板示例供更明确的需求实现，在此也希望提供更多的 idea 来实现其他需求。</p>\n<p>Redux 在控制视图状态上表现得优秀吗？在我看来，这是毫无疑问的。在开发的时候它可能需要比较多一点的代码量，但是当应用的代码基础不断增强以及逻辑的可复用性越来越强的时候，Redux 的光辉，谁也掩盖不了。</p>","frontmatter":{"title":"译：在 Angular 中使用 Redux 来管理用户界面","date":"September 30, 2018","tags":["翻译","Angular","Redux"],"type":"tech"}}},"pageContext":{"slug":"/Angular-Redux/","previous":{"fields":{"slug":"/Go-Function/"},"frontmatter":{"title":"Go 语言函数众生相"}},"next":{"fields":{"slug":"/NPM-Scope/"},"frontmatter":{"title":"拾碎 —— Scoped Packages 的使用"}}}}