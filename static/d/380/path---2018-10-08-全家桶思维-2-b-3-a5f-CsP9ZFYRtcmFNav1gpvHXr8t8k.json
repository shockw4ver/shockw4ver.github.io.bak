{"data":{"site":{"siteMetadata":{"title":"The Minimum Town","author":"Zhang Yongchao"}},"markdownRemark":{"id":"8410456a-9571-5f4f-9b7e-7b37e15cd149","excerpt":"“未经审视的代码是不值得写的” ——兹吉硕底 说到全家桶，最容易想到的大概是各家快餐店推出的这种套餐形式，然后打开订餐 App…\nEmm…","html":"<blockquote>\n<p>“未经审视的代码是不值得写的” ——兹吉硕底</p>\n</blockquote>\n<p>说到全家桶，最容易想到的大概是各家快餐店推出的这种套餐形式，然后打开订餐 App…\nEmm… 在等待送餐员这段时间内，我们不妨来聊聊它的另一层意思</p>\n<h2>全家桶</h2>\n<h3>老朋友</h3>\n<p>以两个在前端世界随很红的“天团”为例，如果你经常逛社区，一定再熟悉不过了：</p>\n<ul>\n<li>\n<p>React 全家桶<br>\n<strong>React（ReactJS or ReactNative) + Redux（主要是以 React-Redux 的形态集成到项目中） + React-Router</strong> + tool chain</p>\n</li>\n<li>\n<p>Vue 全家桶<br>\n<strong>Vue + Vuex + VueRouter</strong> + tool chain</p>\n</li>\n</ul>\n<p>其中：</p>\n<ol>\n<li>\n<p>React 和 Vue 的源文件是不可或缺的</p>\n</li>\n<li>\n<p>Redux 和 Vuex 用于<strong>加强</strong>状态管理，ReactRouter 和 VueRouter 用于<strong>更便捷</strong>的管理路由，它们与框架本身成套地出现在了<strong>大多数</strong>的项目中，因此这里进行了加粗。但它们也并不是必须的，如 UI 组件或一些 SSR 类型的工程等。</p>\n</li>\n<li>\n<p>至于 tool chain，包含了 webpack、gulp、sass、stylus、cdn sdk 等诸多工具，因为其选择范围较大，在不同项目中的实践模式也各有异同，因而通常进行了关注点上的弱化。</p>\n</li>\n</ol>\n<p>可见，除了框架本身外，其他的东西理论上都是可以插拔的，因而这样的“全家桶”可以粗略地概括为：</p>\n<p align=\"center\"><b>由框架本身及其对应的增强库和一套工具链所形成的工程体系</b></p>\n<p>这便是前端世界常常提及的“全家桶”的形态，我们暂且将其中的“框架本身”、“增强库”和“工具链”称作形成这个体系的各个<strong>元素</strong>。\n其实我们也可以发现，全家桶并不一定是一家的，Redux 与 React 相互独立，只是它们在一起的成就总是脍炙人口。</p>\n<h3>意义</h3>\n<p>那么“全家桶”有什么意义呢？\n其实它的意义与它诞生的动机是统一的——为了实现框架的<strong>最佳实践</strong>。</p>\n<p>无论是对于哪个框架，当人们总结出一套全家桶的时候，其中的各个<strong>元素</strong>一定是针对框架本身的某个痛点的解决方案，并且经过了社区生态肯定，可以应用在生产环境中的 lib。它们通常会有全面的测试覆盖率、完整的文档、自身生态，环环相扣的形成了框架的左膀右臂。</p>\n<p>有了<strong>先验</strong>的“全家桶”概念，我们在构建工程的初期，便会尝试直接集成各个模块，从而形成更加完整的框架体系。</p>\n<p>那么，如果跳出“框架”这个围城，将“全家桶”本身作一个小小的升华，会是什么样呢？</p>\n<h2>全家桶思维</h2>\n<p>前面提到的 React 和 Vue，都是具体的框架，他们所对应的其他元素通常是成套的出现在我们的思考中。然而，前端是一个灵活性相当高的领域，有时候我们并不需要全家桶中的所有元素，甚至不需要使用这个框架。因此我们应该尝试跳出这些“成品”的桎梏，去寻找“全家桶”的本质，以帮助我们构建更优更实用的工程。  </p>\n<h3>抽茧剥丝</h3>\n<p>现在，我们脱离框架的范畴，将“全家桶”这个概念完全抽象出来，，根据前文的总结，我们可以得到另一个概括：</p>\n<p align=\"center\" style=\"border: 1px\"><b><u>由主体方案及一系列增强库和工具链所形成的工程体系</u></b></p>\n<p>那么，前面的“React”、“Vue”其实就是所谓的“主体方案”，他们在体系中是不可或缺的，则可以看为这个概念的两个子集，进而我们得到一个公式：</p>\n<p><img src=\"http://processon.com/chart_image/5bbd7883e4b0fe81b65583b7.png\" alt=\"公式\"></p>\n<p>可以看到，最终，主体方案被抽象成了更宽泛的 H5 领域，其他的元素也都去具体化了，即：</p>\n<ul>\n<li>H5 应用主体方案</li>\n<li>状态管理方案</li>\n<li>路由管理方案</li>\n<li>打包构建方案</li>\n<li>组件（模块）管理方案</li>\n<li>文档生成器</li>\n<li>…（各类可选工具）</li>\n</ul>\n<p>这些便是一个现代的前端工程所需要的基本元素，也就是<b><u>全家桶的本质！</u></b>是一种前端工程化的思维方式甚至思维起点！</p>\n<h3>意义</h3>\n<p>那么，给“全家桶”戴这么大顶高帽子是为何目的呢？  </p>\n<h4>1. <strong>举一反三，因地制宜</strong></h4>\n<p>其实前面已经提到一点，即挣脱框架“套路”，在广阔无垠的 lib 海洋（绝大部分由 npmjs.org 组成，hiahiahia~）探索各种各样的体系，从而针对不同的应用场景有不同的解决方案。  </p>\n<p>以 React 体系为例：<br>\n我们都知道有时候 redux 不如 mobx 实用，有时候 ReactRouter 可以用 history.js 代替，那么根据侧重点的不同，他们就可以形成四种体系，甚至直接去掉某个 lib——例如 UI 组件库的工程一般并不需要 redux，也只有少数的会使用 ReactRouter。  </p>\n<p>那么，在确认需要使用 redux 方案后，我们又可以在 react-redux 和  rematch 之中进行考虑，最后，我们也许选择了 dva 来实践整个 React 工程。  </p>\n<p>甚至，在打包后，发现 React 源码体积不太理想，这时候 preact、inferno、anu 等类 React 框架又会充满你的视野。\n随着各个 lib 的实践，渐渐地我们脑海中就形成了各种各样的体系，以便于在面对各类场景的时候都胸有成竹，能进行对应的“最佳实践”。  </p>\n<h4>2. <strong>学习各类 lib 的设计理念、模式，提升编程水平</strong></h4>\n<p>既然是为了实践，那么对各种 lib 的使用就一定要逐渐达到生产水准，总结其优缺点，适应场景等要素。  </p>\n<p>譬如 Redux 的函数式特性与 React 的声明式特性浑然天成，但其集成起来又比较复杂，这时候看到了 rematch，它直接实现了异步方案，并且以类似于配置的方式定义状态，让你能更方便的实践 Redux。最终，在生态找到了 dva，它是一个更完整的封装，并提供了命令行工具<code class=\"language-text\">dva-cli</code>，很好，集成成本也省去了。  </p>\n<p><strong>而这只是一个过程</strong>，为了锻造我们自己的利器。  </p>\n<p>在实际的开发过程中，由于源码体积、功能冗余、集成成本等原因，总会有某个地方不能完全适配当下场景，这时候我们就需要从之前的积累中提炼出一些更加精髓的东西，结果或是造一个更加实用的轮子，或是创造一个全新的 lib 等等，也就锻炼了我们的编程能力。  </p>\n<p>当然，话虽三两行，却是需要长期实践总结的。特别是以全家桶思维来琢磨项目的时候，容易产生一些冗余的集成，毕竟优秀的 lib 那么多，引得人人都跃跃欲试，然而最需要的东西往往很难在眼花缭乱中辨识。</p>\n<p><strong>我们的背包里要有各种各样的工具，但腰间一定得系上我们最信任的武器。</strong>  </p>","frontmatter":{"title":"工程化拾遗——聊聊全家桶","date":"October 08, 2018","tags":["工程化","全家桶"],"type":"tech"}}},"pageContext":{"slug":"/2018-10-08--全家桶思维/","previous":{"fields":{"slug":"/NPM-Scope/"},"frontmatter":{"title":"拾碎 —— Scoped Packages 的使用"}},"next":{"fields":{"slug":"/2018-10-11--新知-可视化思维/"},"frontmatter":{"title":"新知——可视化思维"}}}}